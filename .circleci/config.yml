version: 2.1
orbs:  
  slack: circleci/slack@4.1
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "autoDeploy-Backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "autoDeploy-Frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string  
    steps:
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl --insecure "https://kvdb.io/US4L7TKjnB9AENJyh9UW4G/migration_<<parameters.workflow_id>>")
            if (( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  install_awscli:
    description: Install AWS CLI
    steps:
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs:
     description: Install Node.js 13
     steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout      
      - run: yum install -y tar gzip      
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy --template-file .circleci/files/backend.yml --tags project="Backend-${CIRCLE_WORKFLOW_ID:0:7}" --stack-name "autoDeploy-Backend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy --template-file .circleci/files/frontend.yml --tags project="Backend-${CIRCLE_WORKFLOW_ID:0:7}" --stack-name "autoDeploy-Frontend-${CIRCLE_WORKFLOW_ID:0:7}" --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
             echo $(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filter "Name=tag:project,Values=Backend-${CIRCLE_WORKFLOW_ID:0:7}" --output text) >> .circleci/ansible/inventory.txt            
             cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}      

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli:latest
    steps:
      - checkout
      # Add the necessary SSH key fingerprint
      - add_ssh_keys:
          fingerprints:
            - "2d:28:15:f1:19:c9:4c:89:a3:b7:98:64:2a:c7:98:c9"
      - run:
          name: Install dependencies
          command: |
            yum update
            yum install -y tar gzip unzip
            yum -y install http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum -y install ansible
      #Attach the workspace
      - attach_workspace:
          at: .
      #We get the IP from the inv file and run ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: create .env files
          command: |
            echo NODE_ENV=production > "backend/.env"
            echo VERSION=1 >> "backend/.env"
            echo ENVIROMENT=development >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Run migrations
          command: |
            cd backend
            echo "npm install"
            npm install            
            echo "npm migrations"
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt 

      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              echo 'Migrated successfully'
              echo "insecure" >> ~/.curlrc
              curl https://kvdb.io/US4L7TKjnB9AENJyh9UW4G/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else:
              echo 'Migration failed'
              curl https://kvdb.io/US4L7TKjnB9AENJyh9UW4G/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "2d:28:15:f1:19:c9:4c:89:a3:b7:98:64:2a:c7:98:c9"
      - attach_workspace:
          at: .
      # Dependencies installation      
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend            
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive            
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "2d:28:15:f1:19:c9:4c:89:a3:b7:98:64:2a:c7:98:c9"
      - attach_workspace:
          at: .
      # Dependencies installation
      - install_nodejs
      - install_awscli
      - install_ansible
      - run:
          name: Deploy backend
          command: |
            cd backend

            npm i
            npm run build
            cd ..

            cd .circleci/ansible
            mkdir files
            cd files
            tar -C ../../../backend -czvf artifact.tar.gz .
            cd ../
            
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Backend smoke test.
          command: |
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} --output text )
              export API_URL=http://${BACKEND_PUBLIC_IP}:3030
              echo ${BACKEND_PUBLIC_IP}
              echo backend-${CIRCLE_WORKFLOW_ID:0:7}
              echo ${API_URL}
              if curl -s $API_URL/api/status | grep "ok"
              then
                exit 0
              else
                exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
              FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
              echo $FRONTEND_WEBSITE
              if curl -s $FRONTEND_WEBSITE | grep "Welcome"
              then
                exit 1
              else
                exit 1
              fi
      # - destroy-environment:
      #       workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      # - revert-migrations:
      #       workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]